SET SEARCH_PATH = PIZZA_RUNNER;

--------------------------------- DATA CLEANING -------------------------------------
/*  
CREATING TEMP TABLES FOR ALL THE CHANGES

A] REPLACING 'NULL' FROM EXCLUSIONS AND EXTRAS TO NULL

B] REMOVING KM,  MINS, MINUTE, MINUTES AND REPLACING 'NULL' TO NULL IN  DISTANCE ,DURATION,CANCELLATION IN RUNNER_ORDERS

C] CHANGING COLUMN DATA TYPES IN RUNNER_ORDERS_T
	1) PICKUP_TIME : VARCHAR TO TIMESTAMP   
	2) DURATION    : VARCHAR TO INT
	3) DISTANCE    : VARCHAR TO NUMERIC
*/

-- [A]
CREATE TEMP TABLE CUSTOMER_ORDERS_T AS 
	SELECT ORDER_ID, CUSTOMER_ID,PIZZA_ID,
		CASE 
			WHEN EXCLUSIONS ILIKE 'NULL' OR EXCLUSIONS ILIKE '' OR EXCLUSIONS IS NULL  THEN NULL
			ELSE EXCLUSIONS
		END AS EXCLUSIONS,
		
		CASE 
			WHEN EXTRAS ILIKE 'NULL' OR EXTRAS ILIKE '' OR EXTRAS IS NULL THEN NULL
			ELSE EXTRAS 
		END AS EXTRAS,
	ORDER_TIME
	FROM PIZZA_RUNNER.CUSTOMER_ORDERS;
	
-- [B]
CREATE TEMP TABLE RUNNER_ORDERS_T AS 
	SELECT ORDER_ID,RUNNER_ID,	
		CASE 
			WHEN PICKUP_TIME ILIKE 'NULL' THEN NULL
			ELSE PICKUP_TIME
		END AS PICKUP_TIME,
	
		CASE 
			WHEN DISTANCE ILIKE '%KM' THEN rtrim(distance,'km')
			WHEN DISTANCE ILIKE 'NULL' THEN NULL
			ELSE DISTANCE
		END AS DISTANCE,
		
		CASE 
			WHEN DURATION ILIKE '%MIN%' THEN rtrim(DURATION,'minutes')
			WHEN DURATION ILIKE 'NULL' THEN NULL
			ELSE DURATION
		END AS DURATION,
		
		CASE 
			WHEN CANCELLATION ILIKE 'NULL' OR CANCELLATION IS NULL OR CANCELLATION ILIKE '' THEN NULL
			ELSE CANCELLATION
			END AS CANCELLATION
	FROM RUNNER_ORDERS;
	
-- [C]			
ALTER TABLE RUNNER_ORDERS_T 
	ALTER COLUMN DISTANCE TYPE NUMERIC USING DISTANCE::NUMERIC,
	ALTER COLUMN DURATION TYPE INT USING DURATION::INT,
	ALTER COLUMN PICKUP_TIME TYPE timestamp WITHOUT TIME ZONE USING PICKUP_TIME::timestamp

------------------------------------ [A] Pizza Metrics -------------------------------


-- QUE 1 : How many pizzas were ordered?
-- ANS :

SELECT COUNT(ORDER_ID) AS ORDER_COUNT
FROM CUSTOMER_ORDERS_T

-- QUE 2 : How many unique customer orders were made?
-- ANS :

SELECT COUNT(DISTINCT ORDER_ID) AS "UNIQUE_ORDERS"
FROM CUSTOMER_ORDERS_T

-- QUE 3 : How many successful orders were delivered by each runner?
-- ANS :

SELECT COUNT(ORDER_ID) AS "successful orders"
FROM RUNNER_ORDERS_T
WHERE CANCELLATION IS NULL;

-- QUE 4 : How many of each type of pizza was delivered?
-- ANS :

SELECT PM.PIZZA_NAME, COUNT(RO.ORDER_ID) AS DELIVERY_COUNT
FROM PIZZA_NAMES PM
JOIN CUSTOMER_ORDERS_T CO  ON PM.PIZZA_ID  = CO.PIZZA_ID
JOIN RUNNER_ORDERS_T RO ON CO.ORDER_ID = RO.ORDER_ID
WHERE RO.CANCELLATION IS NULL
GROUP BY 1

---- >> VERIFY

SELECT PN.PIZZA_NAME, RO.ORDER_ID, RO.CANCELLATION --COUNT(RO.ORDER_ID)
FROM PIZZA_NAMES PN
JOIN CUSTOMER_ORDERS_T CO  ON PN.PIZZA_ID  = CO.PIZZA_ID
JOIN RUNNER_ORDERS_T RO ON CO.ORDER_ID = RO.ORDER_ID


-- QUE 5 : How many Vegetarian and Meatlovers were ordered by each customer?
-- ANS :

SELECT CO.CUSTOMER_ID,
	SUM(CASE PIZZA_NAME 
		WHEN 'Vegetarian' THEN 1 ELSE 0 END)  AS Vegetarian,
	SUM(CASE PIZZA_NAME	
		WHEN 'Meatlovers' THEN 1 ELSE 0 END ) AS Meatlovers
FROM PIZZA_NAMES PN
JOIN CUSTOMER_ORDERS_T CO  ON PN.PIZZA_ID  = CO.PIZZA_ID
GROUP BY 1
ORDER BY 1

------->>   verify
SELECT CO.CUSTOMER_ID, PN.PIZZA_NAME--, CO.ORDER_ID, PN.PIZZA_ID
FROM PIZZA_NAMES PN
JOIN CUSTOMER_ORDERS_T CO  ON PN.PIZZA_ID  = CO.PIZZA_ID
ORDER BY 1

-- QUE 6 : What was the maximum number of pizzas delivered in a single order?
-- ANS :

-- If There Is Only One Order With Maximum No. Of Pizza 
SELECT CO.ORDER_ID, COUNT(PIZZA_ID) AS PIZZA_COUNT
FROM CUSTOMER_ORDERS_T CO
JOIN RUNNER_ORDERS_T RO ON CO.ORDER_ID = RO.ORDER_ID
WHERE RO.CANCELLATION IS NULL
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1


-- If There Could Be More Than One Order With Maximum No. Of Pizza 
WITH PIZZA_COUNT_CTE AS(
	SELECT CO.ORDER_ID, COUNT(PIZZA_ID) AS PIZZA_COUNT
	FROM CUSTOMER_ORDERS_T CO
	JOIN RUNNER_ORDERS_T RO ON CO.ORDER_ID = RO.ORDER_ID
	WHERE CANCELLATION IS NULL
	GROUP BY 1
)
SELECT ORDER_ID, PIZZA_COUNT
FROM PIZZA_COUNT_CTE
WHERE PIZZA_COUNT = (SELECT MAX(PIZZA_COUNT) FROM PIZZA_COUNT_CTE)

--> VERIFY 2nd
BEGIN 
INSERT INTO customer_orders_T
  ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
VALUES
  ('1', '101', '2', NULL, NULL, '2020-01-01 18:05:02') ,
  ('1', '101', '1', NULL, NULL, '2020-01-01 18:05:02')
ROLLBACK


-- QUE 7 : For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
-- ANS :

SELECT CO.CUSTOMER_ID, 
	SUM( CASE 
			WHEN EXCLUSIONS IS NULL AND EXTRAS IS NULL THEN 1 ELSE 0 END ) AS NO_CHANGES,
	SUM( CASE 
		 	WHEN EXCLUSIONS IS NOT NULL OR EXTRAS IS NOT NULL THEN 1 ELSE 0 END ) AS ATLEAST_ONE_CHANGES
FROM CUSTOMER_ORDERS_T CO
JOIN RUNNER_ORDERS_T RO ON CO.ORDER_ID = RO.ORDER_ID
WHERE CANCELLATION IS NULL
GROUP BY 1
ORDER BY 1

-- QUE 8  : How many pizzas were delivered that had both exclusions and extras?
-- ANS :

SELECT 
	SUM( CASE 
		 	WHEN EXCLUSIONS IS NOT NULL AND EXTRAS IS NOT NULL THEN 1 ELSE 0 END ) AS WITH_EXCLUSIONS_AND_EXTRAS
FROM CUSTOMER_ORDERS_T CO
JOIN RUNNER_ORDERS_T RO ON CO.ORDER_ID = RO.ORDER_ID
WHERE CANCELLATION IS NULL

-- QUE 9 : What was the total volume of pizzas ordered for each hour of the day?
-- ANS : 

SELECT DATE_PART('HOUR',ORDER_TIME) AS HOUR_OF_DAY,COUNT(PIZZA_ID) AS VOLUME_OF_PIZZA
FROM CUSTOMER_ORDERS_T
GROUP BY 1
ORDER BY 1

-- QUE 10 : What was the volume of orders for each day of the week?
-- ANS :

SELECT DATE_PART('DOW',ORDER_TIME) AS DAY_OF_WEEK,COUNT(PIZZA_ID) AS VOLUME_OF_PIZZA
FROM CUSTOMER_ORDERS_T
GROUP BY 1
ORDER BY 1

