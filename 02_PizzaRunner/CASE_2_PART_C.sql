SET SEARCH_PATH =PIZZA_RUNNER;

CREATE TEMP TABLE CUSTOMER_ORDERS_T AS 
	SELECT ORDER_ID, CUSTOMER_ID,PIZZA_ID,
		CASE 
			WHEN EXCLUSIONS ILIKE 'NULL' OR EXCLUSIONS ILIKE '' OR EXCLUSIONS IS NULL  THEN NULL
			ELSE EXCLUSIONS
		END AS EXCLUSIONS,
		
		CASE 
			WHEN EXTRAS ILIKE 'NULL' OR EXTRAS ILIKE '' OR EXTRAS IS NULL THEN NULL
			ELSE EXTRAS 
		END AS EXTRAS,
	ORDER_TIME
	FROM CUSTOMER_ORDERS;
	
-- [B]
CREATE TEMP TABLE RUNNER_ORDERS_T AS 
	SELECT ORDER_ID,RUNNER_ID,	
		CASE 
			WHEN PICKUP_TIME ILIKE 'NULL' THEN NULL
			ELSE PICKUP_TIME
		END AS PICKUP_TIME,
	
		CASE 
			WHEN DISTANCE ILIKE '%KM' THEN rtrim(distance,'km')
			WHEN DISTANCE ILIKE 'NULL' THEN NULL
			ELSE DISTANCE
		END AS DISTANCE,
		
		CASE 
			WHEN DURATION ILIKE '%MIN%' THEN rtrim(DURATION,'minutes')
			WHEN DURATION ILIKE 'NULL' THEN NULL
			ELSE DURATION
		END AS DURATION,
		
		CASE 
			WHEN CANCELLATION ILIKE 'NULL' OR CANCELLATION IS NULL OR CANCELLATION ILIKE '' THEN NULL
			ELSE CANCELLATION
			END AS CANCELLATION
	FROM RUNNER_ORDERS;
	
-- [C]			
ALTER TABLE RUNNER_ORDERS_T 
	ALTER COLUMN DISTANCE TYPE NUMERIC USING DISTANCE::NUMERIC,
	ALTER COLUMN DURATION TYPE INT USING DURATION::INT,
	ALTER COLUMN PICKUP_TIME TYPE timestamp WITHOUT TIME ZONE USING PICKUP_TIME::timestamp


--------------------------------------------------------------------------------------------

-- 1    
CREATE TEMP TABLE PIZZA_RECIPES_T AS 
	SELECT PIZZA_ID, 
			STRING_TO_TABLE(TOPPINGS,',')::INT AS TOPPING_ID
	FROM PIZZA_RECIPES
	
-- 2 (NOT YET DONE)
WITH TOPPINGS_SPLIT AS (
SELECT PR.PIZZA_ID, PR.TOPPING_ID,PT.TOPPING_NAME
FROM PIZZA_RECIPES_T PR
JOIN PIZZA_TOPPINGS PT ON PR.TOPPING_ID = PT.TOPPING_ID )

-- 3
ALTER TABLE CUSTOMER_ORDERS_T
	ADD COLUMN ROW_ID SERIAL;

-- 4
CREATE TEMP TABLE EXTRAS_SPLIT AS(
SELECT ROW_ID,ORDER_ID,STRING_TO_TABLE(EXTRAS,',')::INT EXTRAS_ID
FROM CUSTOMER_ORDERS_T )

DROP TABLE EXTRAS_SPLIT
-- 5
CREATE TEMP TABLE EXCLUSIONS_SPLIT AS(
SELECT ROW_ID,ORDER_ID,STRING_TO_TABLE(EXCLUSIONS,',')::INT EXCLUSIONS_ID
FROM CUSTOMER_ORDERS_T 
)
DROP TABLE EXCLUSIONS_SPLIT

SELECT * FROM RUNNER_ORDERS_T
SELECT * FROM RUNNER_ORDERS
SELECT * FROM RUNNERS
SELECT * FROM CUSTOMER_ORDERS

SELECT * FROM PIZZA_NAMES
SELECT * FROM PIZZA_RECIPES
SELECT * FROM PIZZA_TOPPINGS

SELECT * FROM PIZZA_RECIPES_T
SELECT * FROM EXTRAS_SPLIT
SELECT * FROM EXCLUSIONS_SPLIT
---------------------------------------------------------------------------------------------------------
-- QUE 1 : What are the standard ingredients for each pizza?
-- ANS :

SELECT PIZZA_NAME, STRING_AGG(PT.TOPPING_NAME,',')
FROM PIZZA_NAMES PN
JOIN PIZZA_RECIPES_T PR ON PN.PIZZA_ID = PR.PIZZA_ID
JOIN PIZZA_TOPPINGS PT ON PR.TOPPING_ID = PT.TOPPING_ID
GROUP BY 1

-- QUE 2 : What was the most commonly added extra?
-- ANS :

WITH EXTRAS_COUNT_CTE AS (
SELECT E.EXTRAS_ID,PT.TOPPING_NAME,COUNT( PT.TOPPING_NAME) AS EXTRAS_COUNT
FROM EXTRAS_SPLIT E
JOIN PIZZA_TOPPINGS PT ON E.EXTRAS_ID = PT.TOPPING_ID
GROUP BY 1,2
)
SELECT EXTRAS_ID AS TOPPPING_ID,TOPPING_NAME,EXTRAS_COUNT
FROM EXTRAS_COUNT_CTE
WHERE EXTRAS_COUNT = (SELECT MAX(EXTRAS_COUNT) FROM EXTRAS_COUNT_CTE)

-- QUE 3 : What was the most common exclusion?
-- ANS :
	
WITH EXCLUSIONS_COUNT_CTE AS (
SELECT E.EXCLUSIONS_ID,PT.TOPPING_NAME,COUNT( PT.TOPPING_NAME) AS EXCLUSIONS_COUNT
FROM EXCLUSIONS_SPLIT E
JOIN PIZZA_TOPPINGS PT ON E.EXCLUSIONS_ID = PT.TOPPING_ID
GROUP BY 1,2
)
SELECT EXCLUSIONS_ID AS TOPPING_ID,TOPPING_NAME,EXCLUSIONS_COUNT
FROM EXCLUSIONS_COUNT_CTE
WHERE EXCLUSIONS_COUNT = (SELECT MAX(EXCLUSIONS_COUNT) FROM EXCLUSIONS_COUNT_CTE)

-- QUE 4 : Generate an order item for each record in the customers_orders table in the format of one of the following:
-- 		   Meat Lovers
--		   Meat Lovers - Exclude Beef
-- 		   Meat Lovers - Extra Bacon
--         Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
-- ANS  :

WITH EXTRAS_CTE AS  (
	SELECT ROW_ID, 'Extras ' || STRING_AGG(PT.TOPPING_NAME,',') AS TOPPING_NAME
	FROM EXTRAS_SPLIT E
	JOIN PIZZA_TOPPINGS PT ON E.EXTRAS_ID = PT.TOPPING_ID
	GROUP BY 1
	ORDER BY 1 ),
EXCLUSION_CTE AS (
	SELECT ROW_ID, 'Exclusions ' || STRING_AGG(PT.TOPPING_NAME,',') AS TOPPING_NAME
	FROM EXCLUSIONS_SPLIT E
	JOIN PIZZA_TOPPINGS PT ON E.EXCLUSIONS_ID = PT.TOPPING_ID
	GROUP BY 1
	ORDER BY 1
	),
UNION_CTE AS (
SELECT * FROM EXTRAS_CTE
UNION ALL
SELECT * FROM EXCLUSION_CTE )

SELECT CO.ROW_ID,CO.ORDER_ID,CO.CUSTOMER_ID,CO.PIZZA_ID,CO.ORDER_TIME,
CONCAT_WS(' - ',PN.PIZZA_NAME , STRING_AGG(UC.TOPPING_NAME, ' - ')) AS ORDER_ITEM --> IF STR2 (EXCLUSIONS AND EXTRAS) IN CONCAT_WS IS NULL THEN STR1( PIZZA_NAME ) IS RETURNED WITH NO CONCATENATION
FROM UNION_CTE UC
FULL JOIN CUSTOMER_ORDERS_T CO ON UC.ROW_ID = CO.ROW_ID
JOIN PIZZA_NAMES PN ON CO.PIZZA_ID = PN.PIZZA_ID
GROUP BY 1,2,3,4,5,PN.PIZZA_NAME
ORDER BY 1

-- QUE 5 : Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table 
--         and add a 2x in front of any relevant ingredients
--         For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
-- ANS :

SELECT * FROM PIZZA_TOPPINGS
SELECT * FROM  EXTRAS_SPLIT
SELECT * FROM EXCLUSIONS_SPLIT
SELECT * FROM CUSTOMER_ORDERS_T
SELECT * FROM RUNNER_ORDERS_T
SELECT * FROM PIZZA_RECIPES_T

WITH INGREDIENTS AS (
SELECT CO.*, PIZZA_NAME,
-- include toppings from extras
	CASE WHEN PT.TOPPING_ID IN (SELECT EXTRAS_ID FROM EXTRAS_SPLIT E WHERE E.ROW_ID = CO.ROW_ID ) THEN '2X '||PT.TOPPING_NAME
		ELSE PT.TOPPING_NAME
	END TOPPING_NAME
FROM  CUSTOMER_ORDERS_T CO 
JOIN PIZZA_NAMES PN ON CO.PIZZA_ID = PN.PIZZA_ID
JOIN PIZZA_RECIPES_T PR ON CO.PIZZA_ID = PR.PIZZA_ID
JOIN PIZZA_TOPPINGS PT ON PR.TOPPING_ID = PT.TOPPING_ID
WHERE PT.TOPPING_ID NOT IN (SELECT EXCLUSIONS_ID FROM EXCLUSIONS_SPLIT EX WHERE EX.ROW_ID = CO.ROW_ID) )
-- exclude toppings from exclusion
SELECT ROW_ID,ORDER_ID,CUSTOMER_ID,PIZZA_ID,ORDER_TIME,
CONCAT_WS(' : ',I.PIZZA_NAME,STRING_AGG(I.TOPPING_NAME,' , '))
FROM INGREDIENTS I
GROUP BY 1,2,3,4,5,I.PIZZA_NAME

-- ORDER ID 7 --> NEEDS TO SHOW BACON , NOT SHOWING AS PIZZA ID 2 DOESN'T HAS BACON IN ITS INGREIDIENTS
-- ORDER INGREDIENTS ALPHABETICALLY

-- QUE 6 : What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?
-- ANS : 
WITH QUANTITY_CTE AS(
	SELECT CO.ROW_ID,PT.TOPPING_NAME,
	-- TOPPING ID IN EXTRAS THEN QUANTITY IS 2
	CASE WHEN PT.TOPPING_ID IN (SELECT EXTRAS_ID FROM EXTRAS_SPLIT E WHERE E.ROW_ID = CO.ROW_ID) THEN 2
	-- TOPPING ID IN EXCLUSION THEN QUANTITY IS 0
		WHEN PT.TOPPING_ID IN (SELECT EXCLUSIONS_ID FROM EXCLUSIONS_SPLIT EX WHERE EX.ROW_ID = CO.ROW_ID) THEN 0
	-- TOPPING ID NEITHER IN EXCLUSION OR EXTRA THEN QUANTITY IS 1
		ELSE 1
	END AS QUANTITY
	FROM CUSTOMER_ORDERS_T CO 
	JOIN RUNNER_ORDERS_T RO ON CO.ORDER_ID = RO.ORDER_ID
	JOIN PIZZA_NAMES PN ON CO.PIZZA_ID = PN.PIZZA_ID
	JOIN PIZZA_RECIPES_T PR ON CO.PIZZA_I-D = PR.PIZZA_ID
	JOIN PIZZA_TOPPINGS PT ON PR.TOPPING_ID = PT.TOPPING_ID
	WHERE RO.CANCELLATION IS NULL
)

SELECT TOPPING_NAME,SUM(QUANTITY) AS TOTAL_QUANTITY
FROM QUANTITY_CTE
GROUP BY 1
ORDER BY 2 DESC















