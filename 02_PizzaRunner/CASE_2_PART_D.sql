SET SEARCH_PATH =PIZZA_RUNNER;
SELECT * FROM PIZZA_RECIPES_T
-- [A]
CREATE TEMP TABLE CUSTOMER_ORDERS_T AS 
	SELECT ORDER_ID, CUSTOMER_ID,PIZZA_ID,
		CASE 
			WHEN EXCLUSIONS ILIKE 'NULL' OR EXCLUSIONS ILIKE '' OR EXCLUSIONS IS NULL  THEN NULL
			ELSE EXCLUSIONS
		END AS EXCLUSIONS,
		
		CASE 
			WHEN EXTRAS ILIKE 'NULL' OR EXTRAS ILIKE '' OR EXTRAS IS NULL THEN NULL
			ELSE EXTRAS 
		END AS EXTRAS,
	ORDER_TIME
	FROM CUSTOMER_ORDERS;
	
-- [B]
CREATE TEMP TABLE RUNNER_ORDERS_T AS 
	SELECT ORDER_ID,RUNNER_ID,	
		CASE 
			WHEN PICKUP_TIME ILIKE 'NULL' THEN NULL
			ELSE PICKUP_TIME
		END AS PICKUP_TIME,
	
		CASE 
			WHEN DISTANCE ILIKE '%KM' THEN rtrim(distance,'km')
			WHEN DISTANCE ILIKE 'NULL' THEN NULL
			ELSE DISTANCE
		END AS DISTANCE,
		
		CASE 
			WHEN DURATION ILIKE '%MIN%' THEN rtrim(DURATION,'minutes')
			WHEN DURATION ILIKE 'NULL' THEN NULL
			ELSE DURATION
		END AS DURATION,
		
		CASE 
			WHEN CANCELLATION ILIKE 'NULL' OR CANCELLATION IS NULL OR CANCELLATION ILIKE '' THEN NULL
			ELSE CANCELLATION
			END AS CANCELLATION
	FROM RUNNER_ORDERS;
	
-- [C]			
ALTER TABLE RUNNER_ORDERS_T 
	ALTER COLUMN DISTANCE TYPE NUMERIC USING DISTANCE::NUMERIC,
	ALTER COLUMN DURATION TYPE INT USING DURATION::INT,
	ALTER COLUMN PICKUP_TIME TYPE timestamp WITHOUT TIME ZONE USING PICKUP_TIME::timestamp
-- 1
CREATE TEMP TABLE PIZZA_RECIPES_T AS 
	SELECT PIZZA_ID, 
			STRING_TO_TABLE(TOPPINGS,',')::INT AS TOPPING_ID
	FROM PIZZA_RECIPES
	
-- 2
ALTER TABLE CUSTOMER_ORDERS_T
	ADD COLUMN ROW_ID SERIAL;
ALTER TABLE RUNNER_ORDERS_T
	ADD COLUMN ROW_ID SERIAL;
-- 3
CREATE TEMP TABLE EXTRAS_SPLIT AS(
WITH CTE AS (
	SELECT ROW_ID,ORDER_ID,STRING_TO_TABLE(EXTRAS,',')::INT EXTRAS_ID
	FROM CUSTOMER_ORDERS_T CO
	)
SELECT * FROM CTE CO
JOIN PIZZA_TOPPINGS PT ON CO.EXTRAS_ID = PT.TOPPING_ID
)

DROP TABLE EXTRAS_SPLIT
DROP TABLE EXCLUSIONS_SPLIT
-- 4
CREATE TEMP TABLE EXCLUSIONS_SPLIT AS(
SELECT ROW_ID,ORDER_ID,STRING_TO_TABLE(EXCLUSIONS,',')::INT EXCLUSIONS_ID
FROM CUSTOMER_ORDERS_T 
)
------------------------------------ D. Pricing and Ratings--------------------------------------------------

-- QUE 1 : If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes -
--         how much money has Pizza Runner made so far if there are no delivery fees?

-- ANS :

SELECT SUM(CASE WHEN PN.PIZZA_NAME = 'Meatlovers' THEN 12
        		WHEN PN.PIZZA_NAME = 'Vegetarian' THEN 10 END) AS money_earned
FROM CUSTOMER_ORDERS_T CO
JOIN RUNNER_ORDERS_T RO ON RO.ORDER_ID = CO.ORDER_ID
JOIN PIZZA_NAMES PN
  ON CO.PIZZA_ID = PN.PIZZA_ID
WHERE RO.CANCELLATION IS NULL

-- QUE 2 : What if there was an additional $1 charge for any pizza extras? Add cheese is $1 extra
-- ANS : 

-- WHEN EXTRAS_COUNT IS NULL THEN EXTRAS_COST 0
-- WHEN  TOPPING_NAME NOT CHEESE ADD 1
-- WHEN  TOPPING_NAME IS CHEESE ADD 2 ( AS CHEESE IS 1$ EXTRA) (U CAN CHANGE TO 1$ IF NEEDED)
WITH NORMAL_COST AS (
	SELECT CO.ROW_ID,SUM(CASE WHEN PN.PIZZA_NAME = 'Meatlovers' THEN 12
					WHEN PN.PIZZA_NAME = 'Vegetarian' THEN 10 END) AS money_earned
	FROM CUSTOMER_ORDERS_T CO
	JOIN RUNNER_ORDERS_T RO ON RO.ORDER_ID = CO.ORDER_ID
	JOIN PIZZA_NAMES PN
	 ON CO.PIZZA_ID = PN.PIZZA_ID
	WHERE RO.CANCELLATION IS NULL
	GROUP BY 1 ),
EXTRAS_COST AS(
	SELECT 
	 CO.ROW_ID,SUM (CASE WHEN CO.EXTRAS IS NULL THEN 0 
			   WHEN  E.TOPPING_NAME NOT ILIKE 'CHEESE' THEN 1
			   WHEN  E.TOPPING_NAME ILIKE 'CHEESE' THEN  2
		  END) EXTRAS_MONEY
	FROM CUSTOMER_ORDERS_T CO
	JOIN runner_orders_t r ON cO.order_id = r.order_id
	JOIN EXTRAS_SPLIT E ON CO.ROW_ID = E.ROW_ID
	WHERE r.cancellation IS NULL
	GROUP BY 1)

SELECT SUM(NORMAL_MONEY)+SUM(EXTRAS_MONEY)
FROM NORMAL_COST N
FULL JOIN EXTRAS_COST E ON N.ROW_ID = E.ROW_ID

-- VERIFY 
SELECT CO.ROW_ID,CO.EXTRAS,E.TOPPING_NAME 
FROM CUSTOMER_ORDERS_T CO
JOIN EXTRAS_SPLIT E ON CO.ROW_ID = E.ROW_ID

SELECT * FROM CUSTOMER_ORDERS_T
-- QUE 3 : The Pizza Runner team now wants to add an additional ratings system that allows customers to rate their runner, 
-- how would you design an additional table for this new dataset 
-- generate a schema for this new table and insert your own data for ratings for each successful customer order between 1 to 5.

-- ANS: 

-- NO RATING ON ORDER NOT DELIVERED 
-- A CUSTOMER CAN ONLY RATE A RUNNER WHO HAS DELIVERED IT'S ORDERED AND NOT OTHER RUNNERS


CREATE TABLE RATING(
RUNNER_ID INT NOT NULL,
ORDER_ID INT NOT NULL,
CUSTOMER_ID INT NOT NULL ,
RATING_VALUE INT CHECK (RATING_VALUE BETWEEN 1 AND 5) ,
RATING_TIME TIMESTAMP DEFAULT NOW() )

INSERT INTO RATING VALUES(1,1,101,4,'2020-01-11 18:34:49'),(1,2,101,3,'2020-01-10 11:22:59'),(2,4,103,5,NOW()),(3,5,104,4,NOW());
insert into rating values(1,3,103,3,now()),(2,7,105,3,now())
SELECT * FROM RATING

/* QUE 4 : Using your newly generated table - can you join all of the information together to form a table which has the following information for successful deliveries?
customer_id
order_id
runner_id
rating
order_time
pickup_time
Time between order and pickup
Delivery duration
Average speed
Total number of pizzas */

-- ANS :
SELECT * FROM CUSTOMER_ORDERS_T

SELECT * FROM RUNNER_ORDERS_T

WITH PIZZA_DELIVERED_COUNT AS(
	SELECT COUNT(CO.PIZZA_ID)  AS TOTAL_PIZZAS_DELIVERED
	FROM CUSTOMER_ORDERS_T CO 
	JOIN RUNNER_ORDERS_T RO ON CO.ORDER_ID = RO.ORDER_ID 
	WHERE RO.CANCELLATION IS NULL
)
SELECT CO.CUSTOMER_ID,CO.ORDER_ID,RO.RUNNER_ID,R.RATING_VALUE AS RATING,CO.ORDER_TIME,RO.PICKUP_TIME,
EXTRACT(MINUTES FROM PICKUP_TIME - ORDER_TIME)||' Mins' AS ORDER_PICKUP_TIMEDIFF,
RO.DURATION,
ROUND(AVG((RO.DISTANCE/RO.DURATION)*60),2) AS AVG_SPEED,
COUNT(*)
FROM CUSTOMER_ORDERS_T CO
JOIN RUNNER_ORDERS_T RO ON RO.ORDER_ID = CO.ORDER_ID
JOIN RATING R ON R.ORDER_ID = CO.ORDER_ID
WHERE RO.CANCELLATION IS NULL
GROUP BY 1,2,3,4,5,6,8
ORDER BY 1

-- QUE 5 : If a Meat Lovers pizza was $12 and Vegetarian $10 fixed prices with no cost for extras and each runner is paid $0.30 per kilometre traveled -
--         how much money does Pizza Runner have left over after these deliveries?

WITH PIZZA_MONEY AS (
	SELECT CO.ROW_ID,CO.ORDER_ID,PN.PIZZA_NAME,SUM(CASE WHEN PN.PIZZA_NAME = 'Meatlovers' THEN 12
					WHEN PN.PIZZA_NAME = 'Vegetarian' THEN 10 END) AS PIZZA_MONEY_PER_ORDER
	FROM CUSTOMER_ORDERS_T CO
	JOIN RUNNER_ORDERS_T RO ON RO.ORDER_ID = CO.ORDER_ID
	JOIN PIZZA_NAMES PN ON CO.PIZZA_ID = PN.PIZZA_ID
	WHERE RO.CANCELLATION IS NULL
	GROUP BY 1,2,3
	ORDER BY 1 ),
	
RUNNER_PAYMENT AS (
	SELECT RO.ROW_ID,RO.ORDER_ID,RO.RUNNER_ID,RO.DISTANCE,RO.DISTANCE*(0.30) AS RUNNER_PAYMENT_PER_ORDER
	FROM RUNNER_ORDERS_T RO
	WHERE RO.CANCELLATION IS NULL ) 
	
SELECT SUM(PIZZA_MONEY_PER_ORDER) - SUM(RUNNER_PAYMENT_PER_ORDER)
FROM PIZZA_MONEY P
LEFT JOIN RUNNER_PAYMENT R ON P.ROW_ID = R.ROW_ID



	


























